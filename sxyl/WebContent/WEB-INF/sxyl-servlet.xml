<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/mvc   
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/data/jpa
        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/context  
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<context:component-scan base-package="cn.gson" />
	<mvc:default-servlet-handler />
	<mvc:annotation-driven />


	<!-- 视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView"></property>
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!-- 配置拦截器 -->
	 <mvc:interceptors>
		 <mvc:interceptor>
				<!-- 需要拦截的请求 -->
				<mvc:mapping path="/*" />
				<!-- 排除的请求 -->
				<mvc:exclude-mapping path="/login" />
				<bean class="com.sxyl.interceptor.LoginInterceptor"/>
			</mvc:interceptor>
	</mvc:interceptors> 


	<!-- 集成自定义的转换器 -->
<!-- 	<bean id="conversionService" -->
<!-- 		class="org.springframework.format.support.FormattingConversionServiceFactoryBean"> -->
<!-- 		<property name="convertor"> -->
<!-- 			<list> -->
<!-- 				自定义的类型转换器 -->
<!-- 				<bean class="com.sxyl.convertor.DateConvertor"/> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 	</bean> -->

	<!-- 验证框架的支持配置 -->

	<!-- 指定消息资源文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:ValidationMessages"></property>
		<property name="fileEncodings" value="utf-8"></property>
		<property name="cacheSeconds" value="120" />
	</bean>

	<!-- 验证框架 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<property name="validationMessageSource" ref="messageSource"></property>
	</bean>

	<!-- 为mvc注册类型转换器和验证器 -->
<!-- 	<mvc:annotation-driven validator="validator" -->
<!-- 		conversion-service="conversionService" /> -->


	<!-- 文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 文件最大上传大小100M->104857600 -->
		<property name="maxUploadSize" value="104857600" />
		<property name="maxInMemorySize" value="4096" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="resolveLazily" value="true" />
	</bean>

	<!-- 继承fastjson输出 -->
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<!-- 配置Fastjson支持 -->
			<bean
				class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json;charset=UTF-8</value>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
				<property name="features">
					<list>
						<value>WriteMapNullValue</value>
						<value>QuoteFieldNames</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>


	<!-- 数据源的配置 -->
	<!-- 数据源公共部分 -->
	<!-- 加载配置文件 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:db-resource.properties</value>
			</list>
		</property>
	</bean>

	<!-- 创建一个带连接池的dataSource -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<property name="targetDataSource">
			<bean class="com.alibaba.druid.pool.DruidDataSource">
				<property name="url" value="${db.url}" />
				<property name="username" value="${db.username}" />
				<property name="password" value="${db.password}" />
				<property name="initialSize" value="1" />
				<property name="minIdle" value="10" />
				<property name="maxActive" value="30" />
				<property name="maxWait" value="60000" />
				<property name="timeBetweenEvictionRunsMillis" value="60000" />
				<property name="minEvictableIdleTimeMillis" value="300000" />
				<property name="testWhileIdle" value="false" />
				<property name="testOnBorrow" value="false" />
				<property name="testOnReturn" value="false" />
				<property name="poolPreparedStatements" value="false" />
				<property name="maxPoolPreparedStatementPerConnectionSize"
					value="20" />
				<property name="defaultAutoCommit" value="true" />
				<property name="ValidationQueryTimeout" value="60000" />
				<property name="validationQuery" value="select 1" />
			</bean>
		</property>
	</bean>

	<!-- jpa相关的整合 start -->
	<!-- 指定jpa的Dao所在根包 -->
	<jpa:repositories base-package="com.sxyl.dao.jpa" />

	<!-- Entity管理工厂，指定数据源 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	<!-- 开启注解事务，指定事务管理器 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- jpa相关的整合 end -->

	<!-- MyBatis整合配置 start -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 指定mybatis的配置文件的路径 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath*:mappers/*.xml"></property>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!-- MyBatis Mapper接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- MyBatis DAO接口所在包名，basePackage指定的包下面的类会自动查找 -->
		<property name="basePackage" value="com.sxyl.dao.mybaties" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="mybatisTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!-- 开启注解事务，指定事务管理器 -->
	<tx:annotation-driven transaction-manager="mybatisTransactionManager" />
	<!-- MyBatis整合配置 end -->
</beans>